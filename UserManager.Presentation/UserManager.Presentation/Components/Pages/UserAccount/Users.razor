@page "/users"
@using Domain.Interfaces.Services
@using Domain.Common.DTOs
@using User = UserManager.Presentation.Models.User
@using System.Text.Json
@inject IUserService UserService
@inject ILogger<Users> Logger
@rendermode InteractiveServer

<ul class="nav nav-tabs" id="users-tab-nav" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" type="button" role="tab" aria-controls="users" aria-selected="true">Users</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="add-user-tab" data-bs-toggle="tab" data-bs-target="#add-user" type="button" role="tab" aria-controls="add-user" aria-selected="false">Add User</button>
    </li>
</ul>
<div class="tab-content" id="users-tab-content">
    <div class="tab-pane fade show active" id="users" role="tabpanel" aria-labelledby="users-tab">
        <UserList Users="_users" UserDelete="DeleteUser" Cancel="CancelEdit" Save="SaveChanges" Start="StartEditing" />
    </div>
    <div class="tab-pane fade" id="add-user" role="tabpanel" aria-labelledby="add-user-tab">
         <AddUser OnUserCreated="FetchUsers" /> 
    </div>
</div>

@code{
    private List<User>? _users;

    private User _userToEdit = new();

    protected override async Task OnInitializedAsync()
    {
       await FetchUsers();
    }

    private async Task FetchUsers()
    {
        var response = await UserService.GetAsync();

        if (response != null)
        {
            _users = response.Users.Select(userInfo => new User
            {
                Id = userInfo.Id,
                FirstName = userInfo.FirstName,
                LastName = userInfo.LastName,
                StreetAddress = userInfo.StreetAddress,
                City = userInfo.City,
                State = userInfo.State,
                ZipCode = userInfo.ZipCode,
                Age = userInfo.Age,
                Email = userInfo.Email
            }).ToList();
        }
    }

    public async Task DeleteUser(User user)
    {
        var response = await UserService.DeleteUserAsync(user.Id);
        if (response)
        {
            _users!.Remove(user);
        }
    }

    private void StartEditing(User user)
    {
        if (!user.IsEditing)
        {
            _userToEdit.FirstName = user.FirstName;
            _userToEdit.LastName = user.LastName;
            _userToEdit.StreetAddress = user.StreetAddress;
            _userToEdit.City = user.City;
            _userToEdit.State = user.State;
            _userToEdit.ZipCode = user.ZipCode;
            _userToEdit.Age = user.Age;
            _userToEdit.Email = user.Email;
            var jsonString = JsonSerializer.Serialize(_userToEdit);
            user.IsEditing = true;
        }
    }

    private void CancelEdit(User user)
    {
        if (!user.IsEditing) return;
        user.FirstName = _userToEdit.FirstName;
        user.LastName = _userToEdit.LastName;
        user.StreetAddress = _userToEdit.StreetAddress;
        user.City = _userToEdit.City;
        user.State = _userToEdit.State;
        user.ZipCode = _userToEdit.ZipCode;
        user.Age = _userToEdit.Age;
        user.Email = _userToEdit.Email;
    }

    private async Task SaveChanges(User user)
    {
        if (user.IsEditing)
        {
            var request = new UpdateUserRequest
            {
                FirstName = user.FirstName,
                LastName = user.LastName, 
                StreetAddress = user.StreetAddress,
                City = user.City,
                State = user.State,
                ZipCode = user.ZipCode,
                Age = user.Age,
                Email = user.Email
            };

            // Call the UserService to update the user
            var response = await UserService.UpdateUserAsync(user.Id, request);

            if (response == null)
            {
                CancelEdit(user);
                return;
            }

            // Update the original value with the edited value
            user.FirstName = response.FirstName;
            user.LastName = response.LastName;
            user.StreetAddress = response.StreetAddress;
            user.City = response.City;
            user.State = response.State;
            user.ZipCode = response.ZipCode;
            user.Age = response.Age;
            user.Email = response.Email;
            user.IsEditing = false;
        }
    }
}